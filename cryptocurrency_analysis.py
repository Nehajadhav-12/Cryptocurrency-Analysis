# -*- coding: utf-8 -*-
"""Cryptocurrency Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Uo5fcTxOapzghnEh-uIjktU9yLzfbqPW

Importing Libraries
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.metrics import roc_curve, roc_auc_score, classification_report, accuracy_score, confusion_matrix
import os
import matplotlib.pyplot as plt
import seaborn as sns
# for dirname, _, filenames in os.walk('/content/ADA-USD.csv'):
#     for filename in filenames:
#         print(os.path.join(dirname, filename))

from google.colab import files
upload = files.upload()

"""Loading the CSV into DataFrames"""

eth_df: pd.DataFrame = pd.read_csv('/content/ADA-USD.csv')
btc_df = pd.read_csv('/content/ADA-USD.csv')

eth_df.head()

eth_df.info()

## Feature reduction ##
# For this experiment we only care about the Close price
# so we see if any of the 'Open', 'High', 'Low' features are
# canidates for dimensionality reduction

f_list = ['Open', 'High', 'Low']
for f in f_list:
    # calcualte the corrolation between the arrays
    R1 = np.corrcoef(eth_df['Close'], eth_df[f])
    # if the corrolation is above 95% we can drop the feature
    # number of elements in array that are below .95 corrolation
    # if 0 all are above .9, then drop the feature
    num_of_elements = len(R1[R1 < .95])
    if num_of_elements == 0:
        print(f"Drop feature from analysis: {f}")
        eth_df = eth_df.drop(columns=f)

# Generate 10 period lag
for i in range (1,11):
    eth_df[f'clag{i}'] = eth_df['Close'].shift(i)

eth_df = eth_df.dropna()
eth_df = eth_df.reset_index(drop = True)
eth_df.head(5)

# Adding 50 and 200 day moving average
eth_df['MA50'] = eth_df['Close'].rolling(window=50).mean()
eth_df['MA200'] = eth_df['Close'].rolling(window=200).mean()

eth_df = eth_df.fillna(0)


plt.plot(eth_df["Date"], eth_df["MA50"], label = "MA50", linestyle="--")
plt.plot(eth_df["Date"], eth_df["MA200"], label = "MA200", linestyle="--")
plt.plot(eth_df["Date"], eth_df["Close"], label = "price")
plt.legend()
plt.show()

# Main Feature
eth_df['Higher'] = eth_df['Close'] > eth_df['clag1']
eth_df['Higher']

X = eth_df.drop(columns=['Higher', 'Date'], axis=1)
y = eth_df['Higher']

np.random.seed(42)
X_train, X_test, y_train, y_test = train_test_split(X, y)

scaler = StandardScaler()
lr = LogisticRegression()
model = Pipeline([('standardize', scaler),
                    ('log_reg', lr)])

model.fit(X_train, y_train)

# Training
y_pred = model.predict(X_test)
y_train_hat_probs = model.predict_proba(X_test)[:,1] # probability of label

print("Accuracy: ", accuracy_score(y_test, y_pred))

cm = confusion_matrix(y_test, y_pred)
val = np.mat(cm)

classnames = list(set(y_train))
df_cm = pd.DataFrame(val, index=classnames, columns=classnames)
# Convert the Series to a NumPy array before indexing
df_cm = df_cm.astype('float') / df_cm.sum(axis=1).to_numpy()[:, np.newaxis]  # convert to percents

heat = sns.heatmap(df_cm, annot=True, cmap='Blues')
heat.set_xlabel("Predicted Label", fontsize = 12)
heat.set_ylabel("True Label", fontsize = 12)

print("Model Predicts")
# Access the elements using the correct column names (False, True)
print(f"False Postive: {df_cm.loc[False, True]}")
print(f"False Negative: {df_cm.loc[True, False]}")
print(f"True Negative: {df_cm.loc[False, False]}")
print(f"True Postive: {df_cm.loc[True, True]}")

'''
This model's abilty to predict upward movement is high shown by the high true postives,
but the model is unable to determine if the price will be lower shown by the .5 split of true/false negetives.

This model not acceptable to answer the question: will the price of ETH be higher tomarrow.

My Next steps would be to include more features. Some may be:
- Other Cryptos prices for a corrolation
- traditional Finance markets: SPY, QQQ, DOW
- epochs
- % staked
- tokens burned (deflation)
- tokens generated (inflation)


* Not financial advice. DYOR. This is for fun
'''